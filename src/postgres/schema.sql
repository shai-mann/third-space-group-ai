/*
This SQL script initializes the database schema for the application. It performs the following tasks:
1. Drops the existing 'admin' user and all objects owned by it.
2. Creates a new 'admin' user with superuser privileges and sets an encrypted password.
3. Grants all privileges on the 'postgres' database to the 'admin' user.
4. Grants all privileges on all tables and sequences in the 'public' schema to the 'admin' user.
5. Creates the 'users' table with columns for user information and a UUID primary key.
6. Creates the 'hobbies' table with columns for hobby information and an auto-incrementing integer primary key.
7. Creates the 'user_hobbies' table to establish a many-to-many relationship between users and hobbies.
8. Creates the 'user_friends' table to establish a many-to-many relationship between users and their friends.
9. Creates the 'groups' table with columns for group information and an auto-incrementing integer primary key.
10. Creates the 'group_members' table to establish a many-to-many relationship between groups and their members.
*/
-- DB init code - runs every time the app starts up

drop owned by admin;
drop user admin;

create user admin superuser encrypted password 'adminPassword';
grant all privileges on database postgres to admin;

grant all privileges on all tables in schema public to admin;
grant all privileges on all sequences in schema public to admin;

create table if not exists users (
    id uuid DEFAULT gen_random_uuid(),
    email text unique,
    "password" text,
    first_name text,
    last_name text,
    lower_budget integer,
    upper_budget integer,
    primary key (id)
);

create table if not exists hobbies (
    id integer generated by default as identity,
    "name" text,
    min_age integer,
    min_participants integer,
    max_participants integer,
    primary key (id)
);

create table if not exists user_hobbies (
    id integer generated by default as identity,
    "user" uuid,
    hobby integer,
    primary key (id),
    foreign key ("user") references users,
    foreign key (hobby) references hobbies
);

create table if not exists user_friends (
    id integer generated by default as identity,
    "user" uuid,
    friend uuid,
    primary key (id),
    foreign key ("user") references users,
    foreign key (friend) references users
);

CREATE TABLE IF NOT EXISTS user_affinities (
    id integer GENERATED BY DEFAULT AS IDENTITY,
    user_id uuid NOT NULL,
    related_user_id uuid NOT NULL,
    affinity_score integer NOT NULL DEFAULT 0,
    PRIMARY KEY (id),
    FOREIGN KEY (user_id) REFERENCES users(id),
    FOREIGN KEY (related_user_id) REFERENCES users(id),
    UNIQUE (user_id, related_user_id) 
);

create table if not exists groups (
    id integer generated by default as identity,
    conversation int,
    "name" text,
    description text,
    primary key (id)
);

create table if not exists group_members (
    id integer generated by default as identity,
    "user" uuid,
    "group" integer,
    primary key (id),
    foreign key ("user") references users,
    foreign key ("group") references groups
);

-- add a default user
-- Insert Users
INSERT INTO users (email, "password", first_name, last_name) VALUES
('karim.semaan@example.com', 'password', 'Karim', 'Semaan'), -- Central user
('buddy.james@example.com', 'password', 'James', 'Buddy'), -- Buddy
('friend.amy@example.com', 'password', 'Amy', 'Friend'), -- Friend 1
('friend.bob@example.com', 'password', 'Bob', 'Friend'), -- Friend 2
('user.alice@example.com', 'password', 'Alice', 'Random'), -- Rando 1
('user.tom@example.com', 'password', 'Tom', 'Random'), -- Rando 2
('user.lisa@example.com', 'password', 'Lisa', 'Random'); -- Rando 3


-- Insert Hobbies
INSERT INTO hobbies ("name") VALUES
('Tennis'),
('Chess'),
('Painting'),
('Soccer'),
('Reading'),
('Cycling');

-- These were added after the hobbies and the users were added through the extensions PostgresSQL
-- Replace the UUIDs with the actual UUIDs for each user
-- Replace the hobby IDs with the actual IDs for each hobby
-- If DB is reset, the UUIDs will change, so make sure to update them (Unless you assign the values manually)

Insert User Hobbies for Karim
INSERT INTO user_hobbies ("user", hobby) VALUES 
('f690a014-1dd2-4b39-9348-32e0642927db', 1), -- Tennis
('f690a014-1dd2-4b39-9348-32e0642927db', 2); -- Chess

-- Insert User Hobbies for James (Buddy)
INSERT INTO user_hobbies ("user", hobby) VALUES 
('1ab7815e-779e-49ba-b743-9522f2d563e9', 5), -- Reading
('1ab7815e-779e-49ba-b743-9522f2d563e9', 6); -- Cycling

-- Insert User Friends (Karim's friends Amy and Bob)
INSERT INTO user_friends ("user", friend) VALUES 
('f690a014-1dd2-4b39-9348-32e0642927db', '3670e4ac-720c-4464-8794-666cbc8ee24b'), -- Amy
('f690a014-1dd2-4b39-9348-32e0642927db', '67c96f8e-3254-4e14-ad37-9e748fbf64d7'); -- Bob

-- Insert User Affinities based on the relationships
-- Buddy (James) with high affinity score
INSERT INTO user_affinities (user_id, related_user_id, affinity_score) VALUES 
('f690a014-1dd2-4b39-9348-32e0642927db', '1ab7815e-779e-49ba-b743-9522f2d563e9', 100); -- James

-- Friends (Amy and Bob) with medium affinity score
INSERT INTO user_affinities (user_id, related_user_id, affinity_score) VALUES 
('f690a014-1dd2-4b39-9348-32e0642927db', '3670e4ac-720c-4464-8794-666cbc8ee24b', 50), -- Amy
('f690a014-1dd2-4b39-9348-32e0642927db', '67c96f8e-3254-4e14-ad37-9e748fbf64d7', 50); -- Bob


